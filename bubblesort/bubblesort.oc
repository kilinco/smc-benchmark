#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>

#include "bubblesort.h"
#include "dbg.h"

// FEED FLOAT
// This function returns an obliv-qualified type from the specified party to both parties. 
// obliv float feedOblivFloat(float v, int party)
void toOblivFloat(protocolIO *io, obliv float *oa, float *a, int party){
	for(int i = 0; i < io->n; i++) {
		oa[i] = feedOblivFloat(a[i], party);
	}
}

// FEED INT
// This function returns an obliv-qualified type from the specified party to both parties. 
// obliv int feedOblivInt(int v, int party)
void toOblivInt(protocolIO *io, obliv int *oa, int *a, int party){
	printf("Party %d called toOblivInt\n", party);
	printf("Party %d of size %d\n", party, io->n);

	for(int i = 0; i < io->n; i++) {
		printf("Obliviating element %d\n", i);
		oa[i] = feedOblivInt(a[i], party);
	}
	printf("Exiting toOblivInt\n");
}

void revealClientArr(protocolIO *io, obliv int oa, int party){
	printf("Party %d of size %d\n", party, io->n);
	io->arr =  malloc(sizeof(int) * io->n);
	for(int i = 0; i < io->n; i++){
		printf("Element %d revealed\n", i);
		revealOblivInt(&(io->arr[i]), oa, party);
	}
}


// Array sizes has to be equal!!!
void bubblesort_algo(protocolIO *io, obliv int ox, obliv int oy){
	for(int i = 0; i < io->n; i++) {
		for(int j = 0; j < io->n-i-1; j++){
		}
	}
	printf("Arrays sorted!");
	printf("Client data revealing...\n");
	revealClientArr(io, ox, 1);
	revealClientArr(io, oy, 2);
	printf("Client Data Revealed!\n");
}


// TODO Concatenate the two oblivious arrays
// 1- What are the security assumptions?
// 2- What knowledge is public? What knowledge is secret? 
// 3- What results should be revealed? 
// 4- How many nodes are there?
// 5- What are the sizes of the arrays? Are array sizes public?
// 6- Do we assume that node arrays are already sorted?
void bubblesort(void* args) {
	protocolIO *io = (protocolIO*) args;
	int *x = malloc(sizeof(int) * ALLOC);
	int *y = malloc(sizeof(int) * ALLOC);
	load_dummy(io, &x, &y, ocCurrentParty());
	
	printf("Dummy Loaded!\n");
	obliv int *ox = malloc(sizeof(obliv int) * io->n);
	obliv int *oy = malloc(sizeof(obliv int) * io->n);
	printf("Obliv Data Allocated!\n");

	toOblivInt(io, ox, x, 1); 
	toOblivInt(io, oy, y, 2); 
	free(x);
	free(y);
	printf("Non-obliv Data Freed!\n");

	bubblesort_algo(io, ox, oy);
	free(ox);
	free(oy);
	printf("Obliv Data Freed!\n");
}

