#include "../utils.oh"

#include "dijkstra.h"

#include "dbg.h"

void dijkstra_algo(protocolIO *io, obliv int *oa, obliv int *parents){
	bool *visited = (bool *)malloc(sizeof(bool) * V);
	obliv int *dist = (obliv int *) malloc(sizeof(obliv int) * V);
	visited[0] = false; 
	dist[0] = 0;
	parents[0] = -1;
	for(int i = 1; i < V; i++){
		dist[i] = feedOblivInt(INT_MAX, 1);
		parents[i] = feedOblivInt(0, 1);
		visited[i] = false; 
	}

	obliv int MAX_DIST = INT_MAX;
	obliv int NO_CONNECT = 0;
	obliv int min_idx;
    
	for(int count = 0; count < V-1; count++){
		obliv int min_dist = INT_MAX;

		for(int u = 0; u < V; u++)
			if(visited[u] == false)
				obliv if(dist[u] < min_dist){
					min_idx = u;
					min_dist = dist[u];
				}
		
		int v = revealOblivInt(min_idx, 0); 
		
		visited[v] = true; 
		for (int i = 0; i < V; i++){
			if(visited[i] == false)
				obliv if(oa[v*V+i] !=  NO_CONNECT)
					obliv if(dist[v] != MAX_DIST)
						obliv if(dist[v] + oa[v*V+i] < dist[i]){ 
							dist[i] = dist[v] + oa[v*V+i]; 
							parents[i] ^= v;
						}
		}
	} 
	free(visited);
	free(dist);
}

void dijkstra(void* args){
	protocolIO *io = (protocolIO*) args;

	int *x = malloc(sizeof(int) * ALLOC);
	int *y = malloc(sizeof(int) * ALLOC);
	load_dummy(io, &x, &y, ocCurrentParty());
	printf("Dummy Loaded!\n");

	obliv int *ox = malloc(sizeof(obliv int) * io->n);
	obliv int *oy = malloc(sizeof(obliv int) * io->n);
	printf("Obliv Data Allocated!\n");

	feedOblivIntArray(ox, x, io->n, 1);
	feedOblivIntArray(oy, y, io->n, 2);
	free(x);
	free(y);

	printf("Initializing output for party %d!\n", ocCurrentParty());
	obliv int *parents = malloc(sizeof(obliv int) * V);
	printf("Dijkstra running for party %d!\n", ocCurrentParty());
	dijkstra_algo(io, ox, parents);

	io->arr = malloc(sizeof(int) * V);
	revealOblivIntArray(io->arr, parents, V, 0);
	
	//printf("Client Data Revealed!\n");
	free(ox);
	free(oy);
	free(parents);
	//printf("Obliv Data Freed!\n");
	//log_info("Yao Gate Count: %d\n", yaoGateCount()); // - 7683
}

