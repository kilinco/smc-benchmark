#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>

#include "bubblesort.h"
#include "dbg.h"

// FEED FLOAT
// This function returns an obliv-qualified type from the specified party to both parties. 
// obliv float feedOblivFloat(float v, int party)
void toOblivFloat(protocolIO *io, obliv float *oa, float *a, int party){
	for(int i = 0; i < io->n; i++) {
		oa[i] = feedOblivFloat(a[i], party);
	}
}

// FEED INT
// This function returns an obliv-qualified type from the specified party to both parties. 
// obliv int feedOblivInt(int v, int party)
void toOblivInt(int size, obliv int *oa, int *a, int party){
	printf("Party %d called toOblivInt\n", party);
	printf("Party %d of size %d\n", party, size);
	for(int i = 0; i < size; i++) {
		printf("Obliviating element %d\n", i);
		oa[i] = feedOblivInt(a[i], party);
	}
	printf("Exiting toOblivInt\n");
}

void revealClientArr(protocolIO *io, obliv int *oa, int party){
	printf("Party %d of size %d\n", party, io->n);
	for(int i = 0; i < io->n; i++){
		revealOblivInt(&(io->arr[i]), oa[i], 0);
		printf("Party %d Element %d revealed as %d\n", party, i, io->arr[i]);
	}
}

void swapInt(obliv int* a,obliv int* b) obliv
{
  ~obliv(en) {
    obliv int t = 0;
    obliv if(en) t=*a^*b;
    *a^=t;
    *b^=t;
  }
}

void cmpswapInt(void* va,void* vb)
{
  obliv int *a=va,*b=vb;
  obliv if(*a>*b) swapInt(a,b);
}

void mergesort_algo(protocolIO *io, obliv int *out){
	for(int i = 0; i < io->n; i++) {
		for(int j = 0; j < io->n; j++){
			cmpswapInt(out+j, out+i);
		}
	}
}

void concatenate(protocolIO *io, obliv int *ox, obliv int *oy, obliv int **out, int party){
	printf("Party %d entered Concatenate!\n", party);
	for(int i = 0; i < io->n; i++){
		*(*out + i) = ox[i];
	}
	for(int i = 0; i < io->n; i++){
		*(*out + io->n + i) = oy[i];
	}
}

void mergesort(void* args) {
	protocolIO *io = (protocolIO*) args;

	int *x = malloc(sizeof(int) * ALLOC);
	int *y = malloc(sizeof(int) * ALLOC);
	load_dummy(io, &x, &y, ocCurrentParty());

	printf("Dummy Loaded!\n");
	obliv int *ox = malloc(sizeof(obliv int) * io->n);
	obliv int *oy = malloc(sizeof(obliv int) * io->n);
	printf("Obliv Data Allocated!\n");

	toOblivInt(io->n, ox, x, 1); 
	toOblivInt(io->n, oy, y, 2); 
	free(x);
	free(y);
	printf("Non-obliv Data Freed!\n");
	
	// CONCATENATE -- DOES NOT HAVE TO BE THIS WAY 
	// concatenation can be done during sorting
	obliv int *out =  malloc(sizeof(obliv int) * io->n * 2);
	concatenate(io, ox, oy, &out, ocCurrentParty()); 
	free(ox);
	free(oy);
	
	// io->n CHANGED (=8)
	io->n =  io->n * 2;
	io->arr = malloc(sizeof(int) * io->n);
	mergesort_algo(io, out);

	printf("Arrays sorted!");
	printf("Client data revealing...\n");
	revealClientArr(io, out, 1);
	revealClientArr(io, out, 2);
	printf("Client Data Revealed!\n");

	free(out);
	printf("Obliv Data Freed!\n");
}

