#include <stdio.h>
#include <stdlib.h>
#include <obliv.oh>

#include "mergesort.h"
#include "../utils.oh"
#include "dbg.h"

void batcherSwap(unsigned char* data,size_t n,size_t w,
                 void (*cmpswap)(void*,void*,void*),void* arg){
  size_t i;
  for(i=0;i+1<n;i+=2) cmpswap(data+w*i,data+w*(i+1),arg);
}

void batcherMerge(unsigned char* data,size_t n1,size_t n2,size_t w,
                  void (*cmpswap)(void*,void*,void*),void* arg){
  if(n1+n2<=1) return;
  int odd = n1%2;
  batcherMerge(data,(n1+1)/2,(n2+!odd)/2,w*2,cmpswap,arg);
  batcherMerge(data+w,n1/2,  (n2+odd)/2,  w*2,cmpswap,arg);
  batcherSwap(data+w*!odd,n1+n2-!odd,w,cmpswap,arg);
}

void batcherSort(void* data, size_t n,size_t w,
                 void (*cmpswap)(void*,void*,void*),void* arg){
  if(n<=1) return;
  batcherSort(data,n/2,w,cmpswap,arg);
  batcherSort((unsigned char*)data+w*(n/2),(n+1)/2,w,cmpswap,arg);
  batcherMerge(data,n/2,(n+1)/2,w,cmpswap,arg);
}

void cmpswapInt(void* va,void* vb){
  obliv int *a=va,*b=vb;
  obliv if(*a>*b) swapInt(a,b);
}

void mergesort_algo(protocolIO *io, obliv int *out, int party){
	printf("Party %d Started MergeSort!\n",party);
	batcherMerge(out, io->n, io->n, sizeof(*out), cmpswapInt, NULL);
	//batcherSort(out, io->n, sizeof(obliv int), cmpswapInt, NULL);
}

void mergesort(void* args) {
	protocolIO *io = (protocolIO*) args;

	int *x = malloc(sizeof(int) * ALLOC);
	int *y = malloc(sizeof(int) * ALLOC);
	load_dummy(io, &x, &y, ocCurrentParty());
	printf("Dummy Loaded!\n");

	obliv int *out =  malloc(sizeof(obliv int) * io->n * 2);
	feedOblivIntArray(out, x, io->n, 1);
	feedOblivIntArray(out+io->n, y, io->n, 2);
	free(x);
	free(y);
	printf("Non-obliv Data Freed!\n");

	/*

	obliv int *ox =  malloc(sizeof(obliv int) * io->n);
	obliv int *oy =  malloc(sizeof(obliv int) * io->n);
	feedOblivIntArray(ox, x, io->n, 1);
	feedOblivIntArray(oy, y, io->n, 2);
	int i = 0, k = 0, j = 0, *change;
	while(i < io->n)
	{	
		obliv int ochange = 1;
		obliv if(ox[i]<oy[j]) {out[k] = ox[i]; ochange = 0;}
		else out[k] = oy[j];		
		k++;
		revealOblivInt(&change, ochange, 0); 
		if(change == 0){
			i++; 
			printf("Party = %d, change = %d take element from left array!\n", ocCurrentParty(), change);
		}
		else{
			j++;
			if(j >= io->n) break;
			printf("Party = %d, change = %d take element from right array!\n", ocCurrentParty(), change);
		}
	}

	while(j < io->n){
		out[k] = oy[j];
		k++;
		j++;
	}
	free(ox);
	free(oy);
	*/

	mergesort_algo(io, out, ocCurrentParty());
	printf("Arrays sorted!");

	io->n =  io->n * 2;
	io->arr = malloc(sizeof(int) * io->n);
	printf("Client data revealing...\n");
	revealOblivIntArray(io->arr, out, io->n, 0);
	printf("Client Data Revealed!\n");

	free(out);

	printf("Obliv Data Freed!\n");
	log_info("Yao Gate Count: %d\n", yaoGateCount()); // - 576
}

